name: Build and Test

on:
 push:
   branches:
     - main
     - staging
     - dev
 pull_request:
   branches:
     - main
     - staging
     - dev

jobs:
 build:
   env:
      SOLUTION_FILE: ShapeHandler.sln
   runs-on: windows-latest

   steps:
   - name: Checkout code
     uses: actions/checkout@v2

   - name: Setup MSBuild
     uses: microsoft/setup-msbuild@v1

   - name: Cache NuGet packages
     uses: actions/cache@v4
     with:
       path: ~/.nuget/packages
       key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
       restore-keys: |
         ${{ runner.os }}-nuget-

   - name: Cache build outputs
     uses: actions/cache@v4
     with:
       path: |
         **/bin/Release
         **/obj/Release
         **/*.sln
         **/*.csproj
         **/*.targets
       key: ${{ runner.os }}-build-${{ hashFiles('**/*.csproj') }}
       restore-keys: |
         ${{ runner.os }}-build-

   - name: Restore NuGet packages
     run: nuget restore ${{ env.SOLUTION_FILE }}

   - name: create PFX file
     run: |
         $pfxCertFilePath = Join-Path -Path $env:CertDir -ChildPath $env:CertName
         [System.IO.File]::WriteAllBytes($pfxCertFilePath, [System.Convert]::FromBase64String("${{secrets.CERT_KEY}}"))
         certutil -f -p "" -importpfx $pfxCertFilePath
     env:
        CertDir: D:\a\document-generator\document-generator\ShapeHandler\
        CertName: ShapeHandler_TemporaryKey.pfx

   - name: Build with MSBuild
     if: steps.cache-build.outputs.cache-hit != 'true'  
     run: |  
       msbuild /p:Configuration=Release ${{env.SOLUTION_FILE}} /p:GITHUB_ACTIONS=true

   - name: Upload Artifact
     uses: actions/upload-artifact@v4
     with:
       name: ShapeHandler 
       path: |
         **/bin/Release
         **/obj/Release

 test:
    runs-on: windows-latest
    needs: build
    steps:
       - name: Get Artifact
         uses: actions/download-artifact@v4
         with:
           name: ShapeHandler
           path: ${{ github.workspace }}/ShapeHandler

       - name: Run tests
         run: |
            $testResults = Invoke-Expression -Command "${{ env.vstestPath }} ${{ env.ARTIFACTS_PATH }}\ShapeHandler.Tests.dll"
            $testResults | Out-File -FilePath $env:TEST_RESULTS_PATH
         env:
            vstestPath: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe'
            ARTIFACTS_PATH: ${{ github.workspace }}/ShapeHandler
            TEST_RESULTS_PATH: ${{ github.workspace }}/test-results.txt


       - name: Upload test results
         uses: actions/upload-artifact@v4
         with:
            name: test-results