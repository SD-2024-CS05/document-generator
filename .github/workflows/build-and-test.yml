name: Build and Test

on:
 push:
   branches:
     - main
     - staging
     - dev
   tags:
     - 'v*'
 pull_request:
   branches:
     - main
     - staging
     - dev
   types: [opened, synchronize, reopened, ready_for_review]
 workflow_dispatch:
  inputs:
    build: 
      description: 'Build the project'
      required: false
      default: 'true'
    test: 
      description: 'Run tests'
      required: false
      default: 'true'
    publish: 
      description: 'Publish test results'
      required: false
      default: 'true'
    deploy: 
      description: 'Deploy and publish artifacts'
      required: false
      default: 'false'

jobs:
 Build:
   if: github.event.pull_request.draft == false
   env:
      SOLUTION_FILE: ShapeHandler.sln
   runs-on: windows-latest

   steps:
   - name: Checkout code
     uses: actions/checkout@v2

   - name: Setup MSBuild
     uses: microsoft/setup-msbuild@v1

   - name: Cache NuGet packages
     uses: actions/cache@v4
     with:
       path: ~/.nuget/packages
       key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
       restore-keys: |
         ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}

   - name: Cache build outputs
     uses: actions/cache@v4
     with:
       path: |
         **/bin/Release
         **/obj/Release
         **/bin/Setup
         **/obj/Setup
         **/publish
         **/*.targets
         **/*.sln
         **/*.csproj
       key: ${{ runner.os }}-build-${{ hashFiles('**/*.csproj') }}
       restore-keys: |
         ${{ runner.os }}-build-${{ hashFiles('**/*.csproj') }}

   - name: Restore NuGet packages
     run: nuget restore ${{ env.SOLUTION_FILE }}

   - name: create PFX file
     run: |
         $pfxCertFilePath = Join-Path -Path $env:CertDir -ChildPath $env:CertName
         [System.IO.File]::WriteAllBytes($pfxCertFilePath, [System.Convert]::FromBase64String("${{secrets.CERT_KEY}}"))
         certutil -f -p "" -importpfx $pfxCertFilePath
     env:
        CertDir: D:\a\document-generator\document-generator\ShapeHandler\
        CertName: ShapeHandler_TemporaryKey.pfx

   - name: Create App Settings
     run: |
           $appSettingsFilePath = Join-Path -Path $env:AppSettingsDir -ChildPath $env:AppSettingsName
           [System.IO.File]::WriteAllText($appSettingsFilePath, $env:AppSettingsContent)
     env:
        AppSettingsDir: D:\a\document-generator\document-generator\ShapeHandler\
        AppSettingsName: appsettings.json
        AppSettingsContent: |
           {
             "AzureKeyVaultURI": "${{ secrets.AZURE_KEY_VAULT_URI }}",
             "Neo4JURI": "${{ secrets.NEO4J_URI }}",
             "Neo4JUsername": "${{ secrets.NEO4J_USERNAME }}",
             "Neo4JPassword": "${{ secrets.NEO4J_PASSWORD }}",
             "Neo4JInstanceID": "${{ secrets.NEO4J_INSTANCE_ID }}",
             "Neo4JInstanceName": "${{ secrets.NEO4J_INSTANCE_NAME }}"
           }

   - name: Build with MSBuild
     run: |
        msbuild ${{ env.SOLUTION_FILE }} ${{ env.BUILD_ARGS }}
     env:
       BUILD_ARGS: ${{ startsWith(github.ref, 'refs/tags/') && 
           '/p:Configuration=Setup /p:GITHUB_ACTIONS=true /t:Publish /p:PublishDir=publish/' ||
           '/p:Configuration=Release /p:GITHUB_ACTIONS=true'}}

   - name: Upload Build Artifact
     uses: actions/upload-artifact@v4
     with:
       name: ShapeHandler 
       path: |
         **/bin/Release
         **/obj/Release
         **/bin/Setup
         **/obj/Setup
         **/publish
         **/*.targets
         **/*.sln
         **/*.csproj

 Test:
    if: startsWith(github.ref, 'refs/tags/') == false
    runs-on: windows-latest
    needs: build

    steps:
       - name: Get Artifact
         uses: actions/download-artifact@v4
         with:
           name: ShapeHandler
           path: ./build

       - name: Run tests  
         run: |
             cd ${{ env.RELEASE_DIR }}
             & "${{ env.vstestPath }}" "${{ env.TEST_FILE }}" "/Logger:trx;LogFileName=${{ env.TEST_RESULTS_PATH }}"
         env:  
            vstestPath: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe  
            RELEASE_DIR: ./build/ShapeHandler.Tests/bin/Release
            TEST_RESULTS_PATH: ${{ github.workspace }}\test-results.trx
            TEST_FILE: '*.Tests.dll'

       - name: Upload Test Results
         uses: actions/upload-artifact@v4
         with:
           name: test-results
           path: ${{ github.workspace }}/test-results.trx
         if: always()

 Publish-Test-Report:
   runs-on: ubuntu-latest
   needs: test
   if: ${{ always() && (needs.test.result == 'success' || needs.test.result == 'failure') }}

   permissions:
    contents: read
    issues: read
    checks: write
    pull-requests: write

   steps:
     - name: Get Test Results
       uses: actions/download-artifact@v4
       with:
         name: test-results
         path: ./test-results

     - name: Publish Test Results
       uses: EnricoMi/publish-unit-test-result-action@v2.18.0
       with:
        files: ./test-results/**/*.trx

 Create-ClickOnce:
   if: startsWith(github.ref, 'refs/tags/')
   runs-on: windows-latest
   needs: build

   steps:
     - name: Checkout repository
       uses: actions/checkout@v2

     - name: Download build artifact
       uses: actions/download-artifact@v4
       with:
         name: ShapeHandler
         path: ./build

     - name: Create zip of ClickOnce artifacts
       run: |
         cd build/ShapeHandler/publish/
         powershell Compress-Archive -Path * -DestinationPath clickonce-publish.zip

     - name: Upload ClickOnce artifacts
       uses: actions/upload-artifact@v4
       with:
         name: clickonce-publish
         path: build/ShapeHandler/publish/clickonce-publish.zip

 Create-Windows-Installer:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    env:
       BUILD_DIR: ${{ github.workspace }}/ShapeHandlerSetup/Release
       SOLUTION_FILE: ShapeHandler.sln

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
         path: ~/.nuget/packages
         key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.vdproj') }}
         restore-keys: |
            ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.vdproj') }}

      - name: Restore NuGet packages
        run: nuget restore ${{ env.SOLUTION_FILE }}

      - name: create PFX file
        run: |
            $pfxCertFilePath = Join-Path -Path $env:CertDir -ChildPath $env:CertName
            [System.IO.File]::WriteAllBytes($pfxCertFilePath, [System.Convert]::FromBase64String("${{secrets.CERT_KEY}}"))
            certutil -f -p "" -importpfx $pfxCertFilePath
        env:
           CertDir: D:\a\document-generator\document-generator\ShapeHandler\
           CertName: ShapeHandler_TemporaryKey.pfx

      - name: Create App Settings
        run: |
              $appSettingsFilePath = Join-Path -Path $env:AppSettingsDir -ChildPath $env:AppSettingsName
              [System.IO.File]::WriteAllText($appSettingsFilePath, $env:AppSettingsContent)
        env:
           AppSettingsDir: D:\a\document-generator\document-generator\ShapeHandler\
           AppSettingsName: appsettings.json
           AppSettingsContent: |
              {
                "AzureKeyVaultURI": "${{ secrets.AZURE_KEY_VAULT_URI }}",
                "Neo4JURI": "${{ secrets.NEO4J_URI }}",
                "Neo4JUsername": "${{ secrets.NEO4J_USERNAME }}",
                "Neo4JPassword": "${{ secrets.NEO4J_PASSWORD }}",
                "Neo4JInstanceID": "${{ secrets.NEO4J_INSTANCE_ID }}",
                "Neo4JInstanceName": "${{ secrets.NEO4J_INSTANCE_NAME }}"
              }
    
      - name: Setup VS Dev Environment
        uses: seanmiddleditch/gha-setup-vsdevenv@v4

      - name: DisableOutOfProc Fix
        run: |
          function Invoke-DisableOutOfProcBuild {
            param ();
            $visualStudioWherePath = ('{0}/Microsoft Visual Studio/Installer/vswhere.exe' -f ${Env:ProgramFiles(x86)});
            $visualStudioInstallationPath = & $visualStudioWherePath -latest -products 'Microsoft.VisualStudio.Product.Enterprise' -property 'installationPath';
            $currentWorkingDirectory = ('{0}/Common7/IDE/CommonExtensions/Microsoft/VSI/DisableOutOfProcBuild' -f $visualStudioInstallationPath);
        
            Set-Location -Path $currentWorkingDirectory;
        
            $disableOutOfProcBuildPath = ('{0}/DisableOutOfProcBuild.exe' -f $currentWorkingDirectory);
        
            & $disableOutOfProcBuildPath;
        
            return;
          }
          Invoke-DisableOutOfProcBuild

      - name: Build Windows Installer
        run: |
          devenv.com ${{ github.workspace }}/ShapeHandlerSetup/ShapeHandlerSetup.vdproj /build "Release|Any CPU"

      - name: Create zip of Windows Installer artifacts
        run: |
          cd ${{ env.BUILD_DIR }}
          powershell Compress-Archive -Path * -DestinationPath windows-installer.zip

      - name: Upload Windows Installer artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: ${{ env.BUILD_DIR }}/windows-installer.zip

 Deploy-Release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    needs: [Create-ClickOnce, Create-Windows-Installer]
    permissions:
      contents: write

    steps:
      - name: Download ClickOnce artifact
        uses: actions/download-artifact@v4
        with:
          name: clickonce-publish
          path: ./artifacts

      - name: Download Windows Installer artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: ./artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}-Installers
          release_name: Release ${{ github.ref }} - Installers
          draft: false
          prerelease: false

      - name: Upload ClickOnce Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/clickonce-publish.zip
          asset_name: clickonce-publish.zip
          asset_content_type: application/zip

      - name: Upload Windows Installer Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-installer.zip
          asset_name: windows-installer.zip
          asset_content_type: application/zip
